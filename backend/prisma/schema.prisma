generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String             @id @default(cuid())
  email                 String             @unique
  password              String
  firstName             String
  lastName              String
  role                  Role
  studentId             String?            @unique
  employeeId            String?            @unique
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  section               String?
  year                  Int?
  assignments           Assignment[]       @relation("AssignmentCreator")
  attendanceRecords     Attendance[]
  enrollments           Enrollment[]
  facultyCourses        FacultyCourse[]
  adminApprovedLeaves   LeaveApplication[] @relation("AdminApprovedLeaves")
  facultyApprovedLeaves LeaveApplication[] @relation("FacultyApprovedLeaves")
  studentLeaves         LeaveApplication[] @relation("StudentLeaves")
  receivedMessages      Message[]          @relation("MessageReceiver")
  sentMessages          Message[]          @relation("MessageSender")
  notices               Notice[]
  predictions           Prediction[]
  submissions           Submission[]

  @@map("users")
}

model Course {
  id             String          @id @default(cuid())
  name           String
  code           String          @unique
  description    String?
  credits        Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  semesterId     String?
  assignments    Assignment[]
  attendance     Attendance[]
  semester       Semester?       @relation(fields: [semesterId], references: [id])
  enrollments    Enrollment[]
  facultyCourses FacultyCourse[]
  timetable      Timetable[]

  @@map("courses")
}

model Semester {
  id                String             @id @default(cuid())
  name              String
  code              String             @unique
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  year              Int
  attendance        Attendance[]
  courses           Course[]
  enrollments       Enrollment[]
  leaveApplications LeaveApplication[]

  @@map("semesters")
}

model AcademicYear {
  id        String   @id @default(cuid())
  year      Int      @unique
  name      String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("academic_years")
}

model Enrollment {
  id         String    @id @default(cuid())
  userId     String
  courseId   String
  createdAt  DateTime  @default(now())
  semesterId String?
  course     Course    @relation(fields: [courseId], references: [id])
  semester   Semester? @relation(fields: [semesterId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Attendance {
  id         String           @id @default(cuid())
  userId     String
  courseId   String
  date       DateTime
  status     AttendanceStatus
  createdAt  DateTime         @default(now())
  semesterId String?
  course     Course           @relation(fields: [courseId], references: [id])
  semester   Semester?        @relation(fields: [semesterId], references: [id])
  user       User             @relation(fields: [userId], references: [id])

  @@unique([userId, courseId, date])
  @@map("attendance")
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  description String
  courseId    String
  creatorId   String
  dueDate     DateTime
  maxMarks    Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  course      Course       @relation(fields: [courseId], references: [id])
  creator     User         @relation("AssignmentCreator", fields: [creatorId], references: [id])
  submissions Submission[]

  @@map("assignments")
}

model Submission {
  id           String           @id @default(cuid())
  assignmentId String
  studentId    String
  content      String?
  filePath     String?
  marks        Int?
  feedback     String?
  status       SubmissionStatus @default(SUBMITTED)
  submittedAt  DateTime         @default(now())
  gradedAt     DateTime?
  assignment   Assignment       @relation(fields: [assignmentId], references: [id])
  student      User             @relation(fields: [studentId], references: [id])

  @@unique([assignmentId, studentId])
  @@map("submissions")
}

model Notice {
  id         String   @id @default(cuid())
  title      String
  content    String
  priority   Priority @default(MEDIUM)
  authorId   String
  targetRole Role?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id])

  @@map("notices")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  chatType   ChatType @default(PRIVATE)
  roomId     String?
  createdAt  DateTime @default(now())
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])

  @@map("messages")
}

model Timetable {
  id        String   @id @default(cuid())
  courseId  String
  dayOfWeek Int
  startTime String
  endTime   String
  room      String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])

  @@map("timetable")
}

model Prediction {
  id              String    @id @default(cuid())
  studentId       String
  courseId        String?
  predictedGrade  String
  riskLevel       RiskLevel
  attendanceRate  Float
  assignmentScore Float
  confidence      Float
  recommendations String[]
  createdAt       DateTime  @default(now())
  student         User      @relation(fields: [studentId], references: [id])

  @@map("predictions")
}

model FacultyCourse {
  id        String   @id @default(cuid())
  facultyId String
  courseId  String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
  faculty   User     @relation(fields: [facultyId], references: [id])

  @@unique([facultyId, courseId])
  @@map("faculty_courses")
}

model LeaveApplication {
  id                  String      @id @default(cuid())
  studentId           String
  startDate           DateTime
  endDate             DateTime
  reason              String
  leaveType           LeaveType
  status              LeaveStatus @default(PENDING)
  facultyStatus       String?
  adminStatus         String?
  facultyApprovedById String?
  adminApprovedById   String?
  facultyApprovedAt   DateTime?
  adminApprovedAt     DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  semesterId          String?
  approvedByAdmin     User?       @relation("AdminApprovedLeaves", fields: [adminApprovedById], references: [id])
  approvedByFaculty   User?       @relation("FacultyApprovedLeaves", fields: [facultyApprovedById], references: [id])
  semester            Semester?   @relation(fields: [semesterId], references: [id])
  student             User        @relation("StudentLeaves", fields: [studentId], references: [id])

  @@map("leave_applications")
}

enum Role {
  ADMIN
  FACULTY
  STUDENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  LATE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ChatType {
  PRIVATE
  GROUP
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum LeaveType {
  SICK
  PERSONAL
  EMERGENCY
  MEDICAL
  OTHER
}

enum LeaveStatus {
  PENDING
  FACULTY_APPROVED
  APPROVED
  REJECTED
}
